// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package domain

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoanClient is the client API for Loan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanClient interface {
	// Sends a greeting
	AddLoan(ctx context.Context, in *NewLoan, opts ...grpc.CallOption) (*NewLoan, error)
	GetLoans(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*ItemResponse, error)
}

type loanClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanClient(cc grpc.ClientConnInterface) LoanClient {
	return &loanClient{cc}
}

func (c *loanClient) AddLoan(ctx context.Context, in *NewLoan, opts ...grpc.CallOption) (*NewLoan, error) {
	out := new(NewLoan)
	err := c.cc.Invoke(ctx, "/domain.Loan/AddLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanClient) GetLoans(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*ItemResponse, error) {
	out := new(ItemResponse)
	err := c.cc.Invoke(ctx, "/domain.Loan/GetLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanServer is the server API for Loan service.
// All implementations must embed UnimplementedLoanServer
// for forward compatibility
type LoanServer interface {
	// Sends a greeting
	AddLoan(context.Context, *NewLoan) (*NewLoan, error)
	GetLoans(context.Context, *HelloRequest) (*ItemResponse, error)
	mustEmbedUnimplementedLoanServer()
}

// UnimplementedLoanServer must be embedded to have forward compatible implementations.
type UnimplementedLoanServer struct {
}

func (UnimplementedLoanServer) AddLoan(context.Context, *NewLoan) (*NewLoan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLoan not implemented")
}
func (UnimplementedLoanServer) GetLoans(context.Context, *HelloRequest) (*ItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoans not implemented")
}
func (UnimplementedLoanServer) mustEmbedUnimplementedLoanServer() {}

// UnsafeLoanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanServer will
// result in compilation errors.
type UnsafeLoanServer interface {
	mustEmbedUnimplementedLoanServer()
}

func RegisterLoanServer(s grpc.ServiceRegistrar, srv LoanServer) {
	s.RegisterService(&Loan_ServiceDesc, srv)
}

func _Loan_AddLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLoan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).AddLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Loan/AddLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).AddLoan(ctx, req.(*NewLoan))
	}
	return interceptor(ctx, in, info, handler)
}

func _Loan_GetLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanServer).GetLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domain.Loan/GetLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanServer).GetLoans(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Loan_ServiceDesc is the grpc.ServiceDesc for Loan service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Loan_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domain.Loan",
	HandlerType: (*LoanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLoan",
			Handler:    _Loan_AddLoan_Handler,
		},
		{
			MethodName: "GetLoans",
			Handler:    _Loan_GetLoans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domain/loan.proto",
}
